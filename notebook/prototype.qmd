---
title: "Inverse Forward Sampling Case Studies"
author: "Maximilian Scholz"
format: html
editor: visual
execute: 
  cache: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.align = "center", fig.retina = 3,
                      fig.width = 6, fig.height = (6 * 0.618),
                      out.width = "80%", collapse = TRUE,
                      dev = "png", dev.args = list(type = "cairo-png"))

options(digits = 3, width = 120,
        dplyr.summarise.inform = FALSE,
        knitr.kable.NA = "")
```

```{r load-libraries, warning=FALSE, message=FALSE}
library(tidyverse)
library(brms)
library(bayesim)
library(bayeshear)
library(patchwork)
library(tidybayes)
library(future)
library(SBC)
library(posterior)

set.seed(671328974)
plan(multisession)
options(brms.backend = "cmdstanr")
options(SBC.min_chunk_size = 5)
cache_dir <- "./_brms_SBC_cache"
```

```{r load-data}
data("epilepsy")
head(epilepsy)
```
```{r model-prep}
# Build the MV formula for a simple model
age_formula <- bf(zAge ~ 1) + gaussian()
base_bormula <- bf(zBase ~ 1) + gaussian()
trt_formula <- bf(Trt ~ 1) + bernoulli()
count_formula <- bf(count ~ zAge + zBase * Trt) + negbinomial()
model_formula <- age_formula +
                 base_bormula +
                 trt_formula +
                 count_formula +
                 set_rescor(FALSE)
model_prior = prior(student_t(3, 0, 2.5), resp = "count", class = "b")
```

```{r simple-model-fit, message=FALSE, warning=FALSE}
# Sample from the prior of the model with "default" priors
simple_fit_prior_only <- brm(model_formula,
                             data = epilepsy,
                             sample_prior = "only",
                             prior = model_prior
                             )
# See, that it expects people to have 10^toomuch episodes...
pp_check(simple_fit_prior_only, resp = "count")
```

```{r simple-model-sbc, message=FALSE, warning=FALSE}
# SBC the model
template_data = data.frame(count = rep(0, 236),
                           zAge = rnorm(236),
                           zBase = rnorm(236),
                           Trt = as.numeric(rbernoulli(236)))
generator <- SBC_generator_brms(model_formula,
                   data = template_data,
                   prior = model_prior,
                   thin = 50, warmup = 10000, refresh = 2000,
                   generate_lp = TRUE)

datasets <- generate_datasets(generator, 100)

backend <- SBC_backend_brms_from_generator(generator, chains = 1, thin = 1,
                            warmup = 500, iter = 1500,               
                            inits = 0.1)

results <- compute_SBC(datasets, backend,
                    cache_mode = "results", 
                    cache_location = file.path(cache_dir, "first"))

plot_rank_hist(results)
plot_ecdf_diff(results)
```

```{r fit-preconditioned-model}
# Split the df into a preconditioning part and the rest
index <- sample(c(TRUE, FALSE), nrow(epilepsy), replace=TRUE, prob=c(0.95,0.05))
precondition_sample <- epilepsy[!index,]
reduced_epilepsy <- epilepsy[index,]

# Fit the model on the precondition sample
simple_fit_precondition <- brm(
  model_formula, 
  data = precondition_sample,
  prior = model_prior
  )
pp_check(simple_fit_precondition, resp = "count")
```


```{r custom-sbc-generator}
# We want to add the simulated dataset from the preconditioned model as a form
# of empirical prior to the usual prior simulated datasets
one_sim_generator <- function(n, fit, precon_sample) {
  
  index <- sample.int(post_warmup_samples(fit), size = 1)
  dataset <- forward_sampling(fit, index, n)
  pars <- as_draws_df(fit)[index,]
  attr(pars, "draws_df") = NULL
  pars <-   pars[ , -which(
    names(
      pars <- as_draws_df(fit)
      ) %in% c(".chain",".iteration", ".draw"))]
  
  list(
    variables = pars,
    generated = rbind(precon_sample[,colnames(dataset)], dataset)
  )
}

n_sims_generator <- SBC_generator_function(
  one_sim_generator,
  n = 10, # ??? how many samples do we need?
  fit = simple_fit_prior_only,
  precon_sample = precondition_sample
  )
# we skip the loglik for now
```

```{r simple-model-2-step-sbc-data, warning=FALSE, message=FALSE}
precon_datasets <- generate_datasets(n_sims_generator, 100)

precon_backend <- SBC_backend_brms(model_formula,  
                            prior = model_prior, chains = 1,
                            template_data = precon_datasets$generated[[1]])


```

```{r simple-model-2-step-sbc-calc}
precon_results <- compute_SBC(precon_datasets,
                              precon_backend, 
                              cache_mode = "results", 
                              cache_location = file.path(cache_dir, "precon"))
plot_rank_hist(precon_results)
plot_ecdf_diff(precon_results)
```


