---
title: "Inverse Forward Sampling Case Studies"
author: "Maximilian Scholz"
editor: visual
execute: 
  cache: true
  autodep: true
format:
  html:
    embed-resources: true
    smooth-scroll: true
    anchor-sections: true
---

# Setup

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.align = "center", fig.retina = 3,
                      fig.width = 6, fig.height = (6 * 0.618),
                      out.width = "80%", collapse = TRUE,
                      dev = "png", dev.args = list(type = "cairo-png"))

options(digits = 3, width = 120,
        dplyr.summarise.inform = FALSE,
        knitr.kable.NA = "")
```

```{r load-libraries, warning=FALSE, message=FALSE}
library(tidyverse)
library(brms)
library(bayesim)
library(bayeshear)
library(patchwork)
library(SBC)
library(posterior)
library(doFuture)
plan(multisession, workers = 12)

set.seed(671126974)

```

```{r create-precon-data}
precon_ds <- function(N, K){
  beta <- rep(1, K)
  alpha <- 3
  X <- matrix(rnorm(N * K), N, K)
  eta <- alpha + X %*% beta
  mu <- exp(eta)
  
  shape <- 1
  scale <- mu / shape
  #y <- rgamma(N, shape = shape, scale = scale)
  y <- as.vector(rfrechet(N, shape = shape, scale = scale))
  #hist(y)
  
  precondition_sample <- as.data.frame(cbind(y, X))
  return(precondition_sample)
}

```

```{r homebrew-sbc}
SBC <- function(gen_fit, sbc_fit, n_sbc, SBC_DSN, precon_sample = NULL, ...){
  pars <- c(
    colnames(as_draws_df(gen_fit))[
    !names(as_draws_df(gen_fit)) %in% c(".chain",".iteration", ".draw")],
    "loglik"
  )
  variables <- all.vars(gen_fit$formula$formula)
  
  ranks <- as.data.frame(matrix(nrow = SBC_DSN, ncol = length(pars)))
  colnames(ranks) <- pars
  
 results <- foreach(i = seq(SBC_DSN), .options.future = list(seed = TRUE)) %dofuture% {
 # for (i in seq_along(results)) {
    index <- sample.int(post_warmup_samples(gen_fit), size = 1)
    dataset <- data.frame(matrix(rnorm(n_sbc * length(variables)),
      nrow = n_sbc,
      ncol = length(variables)
    ))
    colnames(dataset) <- variables
    dataset$y <- as.vector(
      brms::posterior_predict(gen_fit,
        newdata = dataset,
        draw_ids = index,
        silent = 2,
        refresh = 0
      )
    )

    dataset$y <- ifelse(dataset$y < 10e-12, 10e-12, dataset$y)
    
    true_pars <- as.data.frame(as_draws_matrix(gen_fit)[index,])
    true_ll <- sum(log_lik(gen_fit, dataset, draw_ids = index))
    
    if(!is.null(precon_sample)){
      dataset <- rbind(precon_sample, dataset)
    }
    
    fit <- update(sbc_fit, newdata = dataset, chains = 1, refresh = 0, silent = 2, init_r = 0.1)
    fit_pars <- as.data.frame(as_draws_matrix(fit))
    fit_ll <- rowSums(log_lik(fit, dataset))
    
    tmp <- vector(mode = "numeric", length = length(pars))
    names(tmp) <- pars
    for (name in colnames(fit_pars)){
      tmp[[name]] <- sum(fit_pars[[name]] < true_pars[[name]])
    }
    tmp[["loglik"]] <- sum(fit_ll < true_ll)
    tmp
    #ranks[i, ] <- tmp
    }
  
  for (i in seq_along(results)) {
    ranks[i, ] <- results[[i]]
  }
  
 
 ranks_df <- ranks %>%
  mutate(sim_id=seq_len(n())) %>%
  gather(key = "variable", value="rank", -sim_id)
 
 return(ranks_df)
}

```

```{r run}
SBC_DSN = 100
N_PRE = 50
N_SBC = 50
K = 15

precon_data <- precon_ds(N = N_PRE, K = K)

wide_prior <-  prior(normal(0, 100), class = "b") +
               prior(normal(2, 100), class = "b", coef = "Intercept") +
               prior(gamma(0.001, 0.001), class = "shape")

narrow_prior <-  prior(normal(0, 1), class = "b") +
               prior(normal(2, 2), class = "b", coef = "Intercept") +
               prior(gamma(1, 1), class = "shape")

prior_only_fit <- brm(bf(y ~ ., center = FALSE), 
                  data = precon_data,
                  family = Gamma("log"),
                  prior = wide_prior,
                  cores = 4,
                  sample_prior = "only",
                  silent = 2,
                  refresh = 0,
                  init_r = 0.1
                  )
pp_check(prior_only_fit)

precon_fit <- brm(bf(y ~ ., center = FALSE), 
                  data = precon_data,
                  family = Gamma("log"),
                  prior = wide_prior,
                  cores = 4,
                  silent = 2,
                  refresh = 0,
                  init = 0.1
                  )
pp_check(precon_fit)

vanilla_sbc_df <- SBC(gen_fit = prior_only_fit, sbc_fit = precon_fit, n_sbc = N_SBC, SBC_DSN = SBC_DSN)

with_precon_sbc_df <- SBC(gen_fit = precon_fit, sbc_fit = precon_fit, n_sbc = N_SBC, SBC_DSN = SBC_DSN, precon_sample = precon_data)

without_precon_sbc_df <- SBC(gen_fit = precon_fit, sbc_fit = precon_fit, n_sbc = N_SBC, SBC_DSN = SBC_DSN)

plot_ecdf_diff(vanilla_sbc_df, max_rank=1000)
plot_ecdf_diff(with_precon_sbc_df, max_rank=1000)
plot_ecdf_diff(without_precon_sbc_df, max_rank=1000)
```
