---
title: "Inverse Forward Sampling Case Studies"
author: "Maximilian Scholz"
editor: visual
execute: 
  cache: true
  autodep: true
format:
  html:
    embed-resources: true
    smooth-scroll: true
    anchor-sections: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.align = "center", fig.retina = 3,
                      fig.width = 6, fig.height = (6 * 0.618),
                      out.width = "80%", collapse = TRUE,
                      dev = "png", dev.args = list(type = "cairo-png"))

options(digits = 3, width = 120,
        dplyr.summarise.inform = FALSE,
        knitr.kable.NA = "")
```

# Setup

```{r load-libraries, warning=FALSE, message=FALSE}
library(tidyverse)
library(brms)
library(bayesim)
library(patchwork)
library(posterior)
library(purrr)
library(SBC)
library(future)
library(latex2exp)

NCORES = 10
plan(multisession, workers = NCORES)

set.seed(671126974)
```

```{r, custom-functions}
precon_ds_frechet <- function(N, K, G) {
  beta <- rep(1, K)
  alpha <- 3
  Gs <- sample(G, N, TRUE)
  a_i <- rnorm(G)
  X <- matrix(rnorm(N * K), N, K)
  
  eta <- alpha + X %*% beta + a_i[Gs]
  mu <- exp(eta)
  shape <- 1
  scale <- mu / shape
  y <- as.vector(rfrechet(N, shape = shape, scale = scale))

  return(as.data.frame(cbind(y, X, Gs)))
}


precon_ds_gamma <- function(N, K, G) {
  beta <- rep(1, K)
  alpha <- 3
  Gs <- sample(G, N, TRUE)
  a_i <- rnorm(G)
  X <- matrix(rnorm(N * K), N, K)
  eta <- alpha + X %*% beta + a_i[Gs]
  mu <- exp(eta)
  shape <- 1
  scale <- mu / shape
  y <- as.vector(rgamma(N, shape = shape, scale = scale))

  return(as.data.frame(cbind(y, X, Gs)))
}


ds_gen <- function(n_sbc, fit, ...) {
  variable_names <- all.vars(fit$formula$formula)
  dataset <- data.frame(matrix(rnorm(n_sbc * (length(variable_names) - 1), mean = 0, sd = 1),
    nrow = n_sbc,
    ncol = (length(variable_names) -1)
  ))
  dataset$Gs = sample(max(fit$data$Gs), n_sbc, TRUE)
  colnames(dataset) <- variable_names
  return(dataset)
}
```



# Scaling Narrow

```{r scaling-narrow}
n_sims = 200
N_SBC = 100
K = 15
G = 5
start = 13
end = 25
lpterm = paste0("y ~ ",
            paste0(sapply(2:16, function(x) paste0("V", x)), collapse = " + "),
            " + (1 | Gs)")

log_gamma <- log(SBC:::adjust_gamma(N = 1000, L = 1))

gamma_sbc_results <- vector(mode = "list", length = end - start + 1)
gamma_precon_fit <- brm(bf(lpterm, center = FALSE), 
                    data = precon_ds_gamma(N = end, K = K, G = G),
                    family = Gamma("log"),
                    cores = 4,
                    silent = 2,
                    refresh = 0,
                    init = 0.1
                    )
for (i in start:end) {
  precon_data <- precon_ds_gamma(N = i, K = K, G = G)
  fit <- update(gamma_precon_fit,
                newdata = precon_data,
                cores = 4,
                silent = 2,
                refresh = 0,
                init = 0.1)
  gamma_sbc_results[[i - start + 1]] <- ifs_SBC(fit = fit,
                            n_sims = n_sims,
                            ppred_data_gen = partial(ds_gen, n_sbc = !!N_SBC),
                            precon_sample = precon_data, 
                            lb = 1e-12,
                            ub = 1e300)
}

gamma_ranks <- lapply(gamma_sbc_results, function(x) x$ranks_df)
gamma_gammas <- lapply(
    gamma_ranks,
    function(x) {
      gamma_discrepancy(
        filter(
          x,
          variable == "loglik"
        )$rank,
        post_warmup_draws = 1000,
        log = TRUE
      )
    }
  )



weibull_sbc_results <- vector(mode = "list", length = end - start + 1)
weibull_precon_fit <- brm(bf(lpterm, center = FALSE), 
                    data = precon_ds_gamma(N = end, K = K, G = G),
                    family = weibull("log"),
                    cores = 4,
                    silent = 2,
                    refresh = 0,
                    init = 0.1
                    )

for (i in start:end) {
  precon_data <- precon_ds_gamma(N = i, K = K, G = G)
   fit <- update(weibull_precon_fit,
                newdata = precon_data,
                cores = 4,
                silent = 2,
                refresh = 0,
                init = 0.1)
  weibull_sbc_results[[i - start + 1]] <- ifs_SBC(fit = fit,
                            n_sims = n_sims,
                            ppred_data_gen = partial(ds_gen, n_sbc = !!N_SBC),
                            precon_sample = precon_data, 
                            lb = 1e-12,
                            ub = 1e300)
}

lognormal_sbc_results <- vector(mode = "list", length = end - start + 1)
lognormal_precon_fit <- brm(bf(lpterm, center = FALSE), 
                    data = precon_ds_gamma(N = end, K = K, G = G),
                    family = lognormal(),
                    cores = 4,
                    silent = 2,
                    refresh = 0,
                    init = 0.1
                    )

for (i in start:end) {
  precon_data <- precon_ds_gamma(N = i, K = K, G = G)
     fit <- update(lognormal_precon_fit,
                newdata = precon_data,
                cores = 4,
                silent = 2,
                refresh = 0,
                init = 0.1)
  lognormal_sbc_results[[i - start + 1]] <- ifs_SBC(fit = fit,
                            n_sims = n_sims,
                            ppred_data_gen = partial(ds_gen, n_sbc = !!N_SBC),
                            precon_sample = precon_data, 
                            lb = 1e-12,
                            ub = 1e300)
}


narrow_gamma_df <- data.frame(precon_size = start:end, gamma = rep(NA, end - start + 1), weibull = rep(NA, end - start + 1), lognormal = rep(NA, end - start + 1))
for (i in 1:(end - start + 1)) {
  #  plot_ecdf_diff(sbc_results[[i]]$ranks_df, max_rank=1000)
  if (!any(is.na(gamma_sbc_results[[i]]$ranks_df$rank))) {
    narrow_gamma_df$gamma[[i]] <- gamma_discrepancy(
      filter(gamma_sbc_results[[i]]$ranks_df, variable == "loglik")$rank,
      post_warmup_draws = 1000, log = TRUE
    )
  }
  if (!any(is.na(weibull_sbc_results[[i]]$ranks_df$rank))) {
    narrow_gamma_df$weibull[[i]] <- gamma_discrepancy(
      filter(weibull_sbc_results[[i]]$ranks_df, variable == "loglik")$rank,
      post_warmup_draws = 1000, log = TRUE
    )
  }
  if (!any(is.na(lognormal_sbc_results[[i]]$ranks_df$rank))) {
    narrow_gamma_df$lognormal[[i]] <- gamma_discrepancy(
      filter(lognormal_sbc_results[[i]]$ranks_df, variable == "loglik")$rank,
      post_warmup_draws = 1000, log = TRUE
    )
  }
} 

narrow_gamma_df = narrow_gamma_df %>%
  pivot_longer(!precon_size, names_to = "likelihood", values_to = "log_gamma")

narrow_gamma_df %>%
  ggplot(aes(x = precon_size, y = log_gamma, color = likelihood)) + geom_line() + geom_hline(yintercept = log_gamma, linetype = 3) + xlab("Size of preconditioning sample")+ ggtitle("Narrow Prior") + scale_x_continuous(breaks = seq(start, end, 2))
saveRDS(narrow_gamma_df, "narrow_gamma_df.RDS")
```
